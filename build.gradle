plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT' apply false
}
apply from: 'dependencies.gradle'

version = "${project.mod_version}+${project.minecraft_version}"

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'fabric-loom'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = project.maven_group as Object

    repositories {
        maven {
            name = "Ladysnake Libs"
            url = 'https://dl.bintray.com/ladysnake/libs'
        }
        maven {
            name = 'CottonMC'
            url = 'https://server.bbkr.space/artifactory/libs-release'
        }
        maven {
            name = 'TerraformersMC'
            url = 'https://maven.terraformersmc.com/releases'
        }

        maven { url 'https://jitpack.io' }
    }
    dependencies {
        dependencies.ext.useAsApiOptionally = { dep ->
            modApi(dep) {
                if (!dep.contains('net.fabricmc.fabric-api')) {
                    exclude group: 'net.fabricmc.fabric-api'
                }
                exclude group: 'net.fabricmc'
                if (!dep.contains('me.shedaniel')) {
                    exclude group: 'me.shedaniel'
                }
            }
        }
        dependencies.ext.useAsApiForModuleOptionally = { module, dep ->
            if (rootProject.childProjects.containsKey(module)) {
                if (project.name == module || project.name == 'motherlode')
                    useAsApiOptionally(dep)
            }
        }
        dependencies.ext.useAsApi = { dep ->
            useAsApiOptionally(dep)
            if (project.name == 'motherlode')
                include(dep)
        }
        dependencies.ext.useAsApiForModule = { module, dep ->
            if (rootProject.childProjects.containsKey(module)) {
                if (project.name == module || project.name == 'motherlode')
                    useAsApiOptionally(dep)

                if (project.name == 'motherlode')
                    include(dep)
            }
        }
        dependencies.ext.useAsRuntime = { dep ->
            modRuntime(dep) {
                if (!dep.contains('net.fabricmc.fabric-api')) {
                    exclude group: 'net.fabricmc.fabric-api'
                }
                exclude group: 'net.fabricmc'
                if (!dep.contains('me.shedaniel')) {
                    exclude group: 'me.shedaniel'
                }
            }
        }

        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        tap(rootProject.ext.setDefaultApis)
    }
    configurations {
        dev
    }
    loom {
        shareCaches = true
    }
    repositories {
        jcenter()
    }
    jar {
        classifier "dev"
    }
    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
        }
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: remapJar
        }
        processResources {
            inputs.property "version", project.version

            filesMatching("fabric.mod.json") {
                expand "version": project.version
            }
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
    checkstyle {
        configFile = rootProject.file('checkstyle.xml')
        toolVersion = '8.31'
    }
}

task deleteAllBuildDirs {
    doLast {
        allprojects {
            delete it.buildDir
            mkdir "${it.buildDir}/libs"
        }
    }
}
// build.dependsOn(deleteAllBuildDirs)

jar {
    from 'LICENSE'
}
dependencies {
    afterEvaluate {
        subprojects.each {
            implementation project(path: ":$it.path", configuration: 'dev')
            include project(":$it.path")
        }
    }
    tap(rootProject.ext.setRuntimeTestMods)
}
